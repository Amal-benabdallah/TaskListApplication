{"ast":null,"code":"var _jsxFileName = \"D:\\\\Bureau\\\\TaskListApp\\\\client\\\\src\\\\components\\\\TaskItem.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { updateTaskAction } from '../features/tasks/tasksSlice';\nimport { updateTask } from '../services/taskService';\nimport ProgressBar from './ProgressBar';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst [progressBarStatus, setProgressBarStatus] = useState('ToDo');\nconst TaskItem = ({\n  task\n}) => {\n  _s();\n  const dispatch = useDispatch();\n  const getPriorityColor = priority => {\n    switch (priority) {\n      case 'High':\n        return 'red';\n      case 'Medium':\n        return 'orange';\n      case 'Low':\n        return 'green';\n      default:\n        return 'black';\n    }\n  };\n  const handleStatusChange = async newStatus => {\n    const updatedTask = {\n      ...task,\n      status: newStatus\n    };\n    const result = await updateTask(task.id, updatedTask); // API call\n    dispatch(updateTaskAction(result)); // Redux action\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'space-between'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"span\", {\n      children: task.name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      style: {\n        color: getPriorityColor(task.priority)\n      },\n      children: task.priority\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(ProgressBar, {\n      status: progressBarStatus,\n      onClick: handleProgressBarClick\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => handleStatusChange('To Do'),\n      style: {\n        backgroundColor: task.status === 'To Do' ? 'lightgray' : 'transparent'\n      },\n      children: \"To Do\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => handleStatusChange('In Progress'),\n      style: {\n        backgroundColor: task.status === 'In Progress' ? 'lightgray' : 'transparent'\n      },\n      children: \"In Progress\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => handleStatusChange('Completed'),\n      style: {\n        backgroundColor: task.status === 'Completed' ? 'lightgray' : 'transparent'\n      },\n      children: \"Completed\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 9\n  }, this);\n};\n_s(TaskItem, \"rgTLoBID190wEKCp9+G8W6F7A5M=\", false, function () {\n  return [useDispatch];\n});\n_c = TaskItem;\nexport default TaskItem;\nvar _c;\n$RefreshReg$(_c, \"TaskItem\");","map":{"version":3,"names":["React","useDispatch","updateTaskAction","updateTask","ProgressBar","jsxDEV","_jsxDEV","progressBarStatus","setProgressBarStatus","useState","TaskItem","task","_s","dispatch","getPriorityColor","priority","handleStatusChange","newStatus","updatedTask","status","result","id","style","display","alignItems","justifyContent","children","name","fileName","_jsxFileName","lineNumber","columnNumber","color","onClick","handleProgressBarClick","backgroundColor","_c","$RefreshReg$"],"sources":["D:/Bureau/TaskListApp/client/src/components/TaskItem.js"],"sourcesContent":["import React from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { updateTaskAction } from '../features/tasks/tasksSlice';\r\nimport { updateTask } from '../services/taskService';\r\nimport ProgressBar from './ProgressBar';\r\nconst [progressBarStatus, setProgressBarStatus] = useState('ToDo');\r\n\r\nconst TaskItem = ({ task }) => {\r\n    const dispatch = useDispatch();\r\n\r\n    const getPriorityColor = (priority) => {\r\n        switch(priority) {\r\n            case 'High': return 'red';\r\n            case 'Medium': return 'orange';\r\n            case 'Low': return 'green';\r\n            default: return 'black';\r\n        }\r\n    };\r\n\r\n    const handleStatusChange = async (newStatus) => {\r\n        const updatedTask = { ...task, status: newStatus };\r\n        const result = await updateTask(task.id, updatedTask); // API call\r\n        dispatch(updateTaskAction(result)); // Redux action\r\n    };\r\n\r\n    return (\r\n        <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>\r\n            <span>{task.name}</span>\r\n            <span style={{ color: getPriorityColor(task.priority) }}>{task.priority}</span>\r\n            <ProgressBar status={progressBarStatus} onClick={handleProgressBarClick} />\r\n            <button onClick={() => handleStatusChange('To Do')}\r\n                style={{ backgroundColor: task.status === 'To Do' ? 'lightgray' : 'transparent' }}>\r\n                To Do\r\n            </button>\r\n            <button onClick={() => handleStatusChange('In Progress')}\r\n                style={{ backgroundColor: task.status === 'In Progress' ? 'lightgray' : 'transparent' }}>\r\n                In Progress\r\n            </button>\r\n            <button onClick={() => handleStatusChange('Completed')}\r\n                style={{ backgroundColor: task.status === 'Completed' ? 'lightgray' : 'transparent' }}>\r\n                Completed\r\n            </button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default TaskItem;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}