{"ast":null,"code":"var _jsxFileName = \"D:\\\\Bureau\\\\TaskListApp\\\\client\\\\src\\\\components\\\\TaskItem.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { updateTaskAction } from '../features/tasks/tasksSlice';\nimport { updateTask } from '../services/taskService';\nimport ProgressBar from './ProgressBar';\nimport { Button } from '@mui/material';\nimport EditTaskForm from './EditTaskForm';\nimport ConfirmationDialog from './ConfirmationDialog';\nimport { deleteTask } from '../services/taskService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TaskItem = ({\n  task\n}) => {\n  _s();\n  const dispatch = useDispatch();\n  const [progressBarStatus, setProgressBarStatus] = useState(task.status || 'ToDo');\n  const [showAddForm, setShowAddForm] = useState(false);\n  const [showEditForm, setShowEditForm] = useState(false);\n  const [currentTask, setCurrentTask] = useState(null);\n  const [showConfirmDialog, setShowConfirmDialog] = useState(false);\n  const [priority, setPriority] = useState('Low');\n  const getPriorityColor = priority => {\n    switch (priority) {\n      case 'High':\n        return 'red';\n      case 'Medium':\n        return 'orange';\n      case 'Low':\n        return 'green';\n      default:\n        return 'black';\n    }\n  };\n  const handleStatusChange = async newStatus => {\n    const updatedTask = {\n      ...task,\n      status: newStatus\n    };\n    try {\n      const result = await updateTask(task.id, updatedTask);\n      dispatch(updateTaskAction(result));\n      setProgressBarStatus(newStatus); // Update progress bar status after successful update\n    } catch (error) {\n      console.error('Error updating task status:', error);\n    }\n  };\n  const handleNextStatus = () => {\n    const statuses = ['ToDo', 'InProgress', 'Completed'];\n    const currentStatusIndex = statuses.indexOf(progressBarStatus);\n    const nextStatusIndex = (currentStatusIndex + 1) % statuses.length;\n    const newStatus = statuses[nextStatusIndex];\n    handleStatusChange(newStatus);\n  };\n  const handleDelete = async task => {\n    try {\n      await deleteTask(task.id);\n      dispatch(deleteTaskAction(task.id));\n    } catch (error) {\n      console.error('Failed to delete task:', error);\n    } finally {\n      setShowConfirmDialog(false);\n    }\n  };\n  const confirmDelete = task => {\n    setCurrentTask(task);\n    setShowConfirmDialog(true);\n  };\n  const handleEditClick = task => {\n    setCurrentTask(task);\n    setShowEditForm(true);\n  };\n\n  // Determine the button text based on the current status\n  const buttonText = progressBarStatus === 'Completed' ? 'Completed' : progressBarStatus === 'InProgress' ? 'InProgress' : 'ToDo';\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'space-between',\n      marginBottom: '10px'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"span\", {\n      children: task.name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      style: {\n        color: getPriorityColor(task.priority)\n      },\n      children: task.priority\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(ProgressBar, {\n      status: progressBarStatus\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      variant: \"contained\",\n      color: \"primary\",\n      onClick: handleNextStatus,\n      children: buttonText\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      variant: \"contained\",\n      color: \"secondary\",\n      onClick: () => handleEditClick(task),\n      children: \"Edit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      variant: \"outlined\",\n      color: \"error\",\n      onClick: () => confirmDelete(task),\n      children: \"Delete\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 9\n  }, this);\n};\n_s(TaskItem, \"MSrFxeGyouAKVnMZULNPRb9KtJM=\", false, function () {\n  return [useDispatch];\n});\n_c = TaskItem;\nexport default TaskItem;\nvar _c;\n$RefreshReg$(_c, \"TaskItem\");","map":{"version":3,"names":["React","useState","useDispatch","updateTaskAction","updateTask","ProgressBar","Button","EditTaskForm","ConfirmationDialog","deleteTask","jsxDEV","_jsxDEV","TaskItem","task","_s","dispatch","progressBarStatus","setProgressBarStatus","status","showAddForm","setShowAddForm","showEditForm","setShowEditForm","currentTask","setCurrentTask","showConfirmDialog","setShowConfirmDialog","priority","setPriority","getPriorityColor","handleStatusChange","newStatus","updatedTask","result","id","error","console","handleNextStatus","statuses","currentStatusIndex","indexOf","nextStatusIndex","length","handleDelete","deleteTaskAction","confirmDelete","handleEditClick","buttonText","style","display","alignItems","justifyContent","marginBottom","children","name","fileName","_jsxFileName","lineNumber","columnNumber","color","variant","onClick","_c","$RefreshReg$"],"sources":["D:/Bureau/TaskListApp/client/src/components/TaskItem.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { updateTaskAction } from '../features/tasks/tasksSlice';\r\nimport { updateTask } from '../services/taskService';\r\nimport ProgressBar from './ProgressBar';\r\nimport { Button } from '@mui/material';\r\nimport EditTaskForm from './EditTaskForm';\r\nimport ConfirmationDialog from './ConfirmationDialog';\r\nimport { deleteTask } from '../services/taskService';\r\n\r\n\r\nconst TaskItem = ({ task }) => {\r\n    const dispatch = useDispatch();\r\n    const [progressBarStatus, setProgressBarStatus] = useState(task.status || 'ToDo');\r\n    const [showAddForm, setShowAddForm] = useState(false);\r\n    const [showEditForm, setShowEditForm] = useState(false);\r\n    const [currentTask, setCurrentTask] = useState(null);\r\n    const [showConfirmDialog, setShowConfirmDialog] = useState(false);\r\n    const [priority, setPriority] = useState('Low');\r\n\r\n    const getPriorityColor = (priority) => {\r\n        switch (priority) {\r\n            case 'High': return 'red';\r\n            case 'Medium': return 'orange';\r\n            case 'Low': return 'green';\r\n            default: return 'black';\r\n        }\r\n    };\r\n\r\n    const handleStatusChange = async (newStatus) => {\r\n        const updatedTask = { ...task, status: newStatus };\r\n        try {\r\n            const result = await updateTask(task.id, updatedTask);\r\n            dispatch(updateTaskAction(result));\r\n            setProgressBarStatus(newStatus); // Update progress bar status after successful update\r\n        } catch (error) {\r\n            console.error('Error updating task status:', error);\r\n        }\r\n    };\r\n\r\n    const handleNextStatus = () => {\r\n        const statuses = ['ToDo', 'InProgress', 'Completed'];\r\n        const currentStatusIndex = statuses.indexOf(progressBarStatus);\r\n        const nextStatusIndex = (currentStatusIndex + 1) % statuses.length;\r\n        const newStatus = statuses[nextStatusIndex];\r\n        handleStatusChange(newStatus);\r\n    };\r\n    const handleDelete = async (task) => {\r\n        try {\r\n            await deleteTask(task.id);\r\n            dispatch(deleteTaskAction(task.id));\r\n        } catch (error) {\r\n            console.error('Failed to delete task:', error);\r\n        } finally {\r\n            setShowConfirmDialog(false);\r\n        }\r\n    };\r\n\r\n    const confirmDelete = (task) => {\r\n        setCurrentTask(task);\r\n        setShowConfirmDialog(true);\r\n    };\r\n\r\n    const handleEditClick = (task) => {\r\n        setCurrentTask(task);\r\n        setShowEditForm(true);\r\n    };\r\n\r\n    // Determine the button text based on the current status\r\n    const buttonText = progressBarStatus === 'Completed' ? 'Completed' : progressBarStatus === 'InProgress' ? 'InProgress' : 'ToDo';\r\n\r\n    return (\r\n        <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between', marginBottom: '10px' }}>\r\n            <span>{task.name}</span>\r\n            <span style={{ color: getPriorityColor(task.priority) }}>{task.priority}</span>\r\n            <ProgressBar status={progressBarStatus} />\r\n            <Button variant=\"contained\" color=\"primary\" onClick={handleNextStatus}>\r\n                {buttonText}\r\n            </Button>\r\n            <Button variant=\"contained\" color=\"secondary\" onClick={() => handleEditClick(task)}>Edit</Button>\r\n            <Button variant=\"outlined\" color=\"error\" onClick={() => confirmDelete(task)}>Delete</Button>\r\n        </div>\r\n        \r\n    );\r\n};\r\n\r\nexport default TaskItem;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}