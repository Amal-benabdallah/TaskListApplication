{"ast":null,"code":"var _jsxFileName = \"D:\\\\Bureau\\\\TaskListApp\\\\client\\\\src\\\\components\\\\ProgressBar.js\";\nimport React from 'react';\nimport CircularProgress, { circularProgressClasses } from '@mui/material/CircularProgress';\nimport Box from '@mui/material/Box';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ProgressBar = ({\n  status,\n  onClick\n}) => {\n  let value;\n  switch (status) {\n    case 'Completed':\n      value = 100;\n      break;\n    case 'InProgress':\n      value = 50;\n      break;\n    case 'ToDo':\n    default:\n      value = 0;\n      break;\n  }\n  return /*#__PURE__*/_jsxDEV(Box, {\n    sx: {\n      display: 'flex',\n      justifyContent: 'center',\n      alignItems: 'center',\n      cursor: 'pointer'\n    },\n    onClick: onClick,\n    children: /*#__PURE__*/_jsxDEV(CircularProgress, {\n      variant: \"determinate\",\n      value: value,\n      size: 40 // Adjust the size as needed\n      ,\n      thickness: 4 // Adjust the thickness as needed\n      ,\n      sx: {\n        [`& .${circularProgressClasses.circle}`]: {\n          strokeLinecap: 'round',\n          ...(status === 'Completed' && {\n            color: 'purple' // Full purple when completed\n          }),\n          ...(status === 'InProgress' && {\n            // Gradient for half purple, half grey\n            backgroundImage: `linear-gradient(90deg, purple 50%, grey 50%)`\n          }),\n          ...(status === 'ToDo' && {\n            color: 'grey' // All grey when to do\n          })\n        }\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 9\n  }, this);\n};\n_c = ProgressBar;\nexport default ProgressBar;\nvar _c;\n$RefreshReg$(_c, \"ProgressBar\");","map":{"version":3,"names":["React","CircularProgress","circularProgressClasses","Box","jsxDEV","_jsxDEV","ProgressBar","status","onClick","value","sx","display","justifyContent","alignItems","cursor","children","variant","size","thickness","circle","strokeLinecap","color","backgroundImage","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/Bureau/TaskListApp/client/src/components/ProgressBar.js"],"sourcesContent":["import React from 'react';\r\nimport CircularProgress, { circularProgressClasses } from '@mui/material/CircularProgress';\r\nimport Box from '@mui/material/Box';\r\n\r\nconst ProgressBar = ({ status, onClick }) => {\r\n    let value;\r\n\r\n    switch (status) {\r\n        case 'Completed':\r\n            value = 100;\r\n            break;\r\n        case 'InProgress':\r\n            value = 50;\r\n            break;\r\n        case 'ToDo':\r\n        default:\r\n            value = 0;\r\n            break;\r\n    }\r\n\r\n    return (\r\n        <Box sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center', cursor: 'pointer' }} onClick={onClick}>\r\n            <CircularProgress \r\n                variant=\"determinate\" \r\n                value={value}\r\n                size={40} // Adjust the size as needed\r\n                thickness={4} // Adjust the thickness as needed\r\n                sx={{\r\n                    [`& .${circularProgressClasses.circle}`]: {\r\n                        strokeLinecap: 'round',\r\n                        ...(status === 'Completed' && {\r\n                            color: 'purple', // Full purple when completed\r\n                        }),\r\n                        ...(status === 'InProgress' && {\r\n                            // Gradient for half purple, half grey\r\n                            backgroundImage: `linear-gradient(90deg, purple 50%, grey 50%)`,\r\n                        }),\r\n                        ...(status === 'ToDo' && {\r\n                            color: 'grey', // All grey when to do\r\n                        }),\r\n                    },\r\n                }}\r\n            />\r\n        </Box>\r\n    );\r\n};\r\n\r\nexport default ProgressBar;\r\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,gBAAgB,IAAIC,uBAAuB,QAAQ,gCAAgC;AAC1F,OAAOC,GAAG,MAAM,mBAAmB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEpC,MAAMC,WAAW,GAAGA,CAAC;EAAEC,MAAM;EAAEC;AAAQ,CAAC,KAAK;EACzC,IAAIC,KAAK;EAET,QAAQF,MAAM;IACV,KAAK,WAAW;MACZE,KAAK,GAAG,GAAG;MACX;IACJ,KAAK,YAAY;MACbA,KAAK,GAAG,EAAE;MACV;IACJ,KAAK,MAAM;IACX;MACIA,KAAK,GAAG,CAAC;MACT;EACR;EAEA,oBACIJ,OAAA,CAACF,GAAG;IAACO,EAAE,EAAE;MAAEC,OAAO,EAAE,MAAM;MAAEC,cAAc,EAAE,QAAQ;MAAEC,UAAU,EAAE,QAAQ;MAAEC,MAAM,EAAE;IAAU,CAAE;IAACN,OAAO,EAAEA,OAAQ;IAAAO,QAAA,eAC9GV,OAAA,CAACJ,gBAAgB;MACbe,OAAO,EAAC,aAAa;MACrBP,KAAK,EAAEA,KAAM;MACbQ,IAAI,EAAE,EAAG,CAAC;MAAA;MACVC,SAAS,EAAE,CAAE,CAAC;MAAA;MACdR,EAAE,EAAE;QACA,CAAE,MAAKR,uBAAuB,CAACiB,MAAO,EAAC,GAAG;UACtCC,aAAa,EAAE,OAAO;UACtB,IAAIb,MAAM,KAAK,WAAW,IAAI;YAC1Bc,KAAK,EAAE,QAAQ,CAAE;UACrB,CAAC,CAAC;UACF,IAAId,MAAM,KAAK,YAAY,IAAI;YAC3B;YACAe,eAAe,EAAG;UACtB,CAAC,CAAC;UACF,IAAIf,MAAM,KAAK,MAAM,IAAI;YACrBc,KAAK,EAAE,MAAM,CAAE;UACnB,CAAC;QACL;MACJ;IAAE;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACL;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACD,CAAC;AAEd,CAAC;AAACC,EAAA,GAzCIrB,WAAW;AA2CjB,eAAeA,WAAW;AAAC,IAAAqB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}