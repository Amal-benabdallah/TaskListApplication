{"ast":null,"code":"var _jsxFileName = \"D:\\\\Bureau\\\\TaskListApp\\\\client\\\\src\\\\components\\\\TaskList.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { fetchTasksAction, deleteTaskAction } from '../features/tasks/tasksSlice';\nimport TaskItem from './TaskItem';\nimport AddTaskForm from './AddTaskForm';\nimport { Button, Container, Card, CardContent, Typography, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle, Grid } from '@mui/material';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TaskList = () => {\n  _s();\n  // Assuming the state structure is { tasks: { tasks: [] } }\n  const tasks = useSelector(state => state.tasks.tasks);\n  const dispatch = useDispatch();\n  const [showAddForm, setShowAddForm] = useState(false);\n  const [showEditForm, setShowEditForm] = useState(false);\n  const [currentTask, setCurrentTask] = useState(null);\n  const [showConfirmDialog, setShowConfirmDialog] = useState(false);\n  const [priority, setPriority] = useState('Low');\n  useEffect(() => {\n    dispatch(fetchTasksAction());\n  }, [dispatch]);\n  return /*#__PURE__*/_jsxDEV(Container, {\n    sx: {\n      backgroundColor: '#f0f2f5',\n      // Adjust for more roundness\n      width: '90%',\n      // Adjust the width as per your requirement\n      maxWidth: '700px' // Maximum width, adjust as needed\n      // Centers the card if width is less than 100%\n    },\n    children: [\" \", /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      justifyContent: \"space-between\",\n      alignItems: \"center\",\n      sx: {\n        marginBottom: 2,\n        width: '90%',\n        margin: 'auto',\n        maxWidth: '700px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h4\",\n        children: \"Task List\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        color: \"primary\",\n        onClick: () => setShowAddForm(!showAddForm),\n        children: \"+ ADD Task\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 9\n    }, this), showAddForm && /*#__PURE__*/_jsxDEV(AddTaskForm, {\n      setPriority: setPriority\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 25\n    }, this), tasks.map(task => /*#__PURE__*/_jsxDEV(Card, {\n      variant: \"outlined\",\n      sx: {\n        backgroundColor: 'white',\n        borderRadius: '16px',\n        // Adjust for more roundness\n        width: '90%',\n        // Adjust the width as per your requirement\n        maxWidth: '700px',\n        // Maximum width, adjust as needed\n        margin: 'auto',\n        // Centers the card if width is less than 100%\n        marginBottom: 2\n      },\n      children: /*#__PURE__*/_jsxDEV(CardContent, {\n        children: /*#__PURE__*/_jsxDEV(TaskItem, {\n          task: task\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 17\n      }, this)\n    }, task.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 12\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 9\n  }, this);\n};\n_s(TaskList, \"TBkJQqB50WVpHHaxmpiIma/EhIc=\", false, function () {\n  return [useSelector, useDispatch];\n});\n_c = TaskList;\nexport default TaskList;\nvar _c;\n$RefreshReg$(_c, \"TaskList\");","map":{"version":3,"names":["React","useEffect","useState","useSelector","useDispatch","fetchTasksAction","deleteTaskAction","TaskItem","AddTaskForm","Button","Container","Card","CardContent","Typography","Dialog","DialogActions","DialogContent","DialogContentText","DialogTitle","Grid","jsxDEV","_jsxDEV","TaskList","_s","tasks","state","dispatch","showAddForm","setShowAddForm","showEditForm","setShowEditForm","currentTask","setCurrentTask","showConfirmDialog","setShowConfirmDialog","priority","setPriority","sx","backgroundColor","width","maxWidth","children","container","justifyContent","alignItems","marginBottom","margin","variant","fileName","_jsxFileName","lineNumber","columnNumber","color","onClick","map","task","borderRadius","id","_c","$RefreshReg$"],"sources":["D:/Bureau/TaskListApp/client/src/components/TaskList.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { fetchTasksAction, deleteTaskAction } from '../features/tasks/tasksSlice';\r\nimport TaskItem from './TaskItem';\r\nimport AddTaskForm from './AddTaskForm';\r\n\r\nimport { \r\n    Button, \r\n    Container, \r\n    Card, \r\n    CardContent, \r\n    Typography, \r\n    Dialog, \r\n    DialogActions, \r\n    DialogContent, \r\n    DialogContentText, \r\n    DialogTitle,\r\n    Grid\r\n}  from '@mui/material';\r\n\r\n\r\nconst TaskList = () => {\r\n    // Assuming the state structure is { tasks: { tasks: [] } }\r\n    const tasks = useSelector((state) => state.tasks.tasks);\r\n    const dispatch = useDispatch();\r\n\r\n    const [showAddForm, setShowAddForm] = useState(false);\r\n    const [showEditForm, setShowEditForm] = useState(false);\r\n    const [currentTask, setCurrentTask] = useState(null);\r\n    const [showConfirmDialog, setShowConfirmDialog] = useState(false);\r\n    const [priority, setPriority] = useState('Low');\r\n\r\n    useEffect(() => {\r\n        dispatch(fetchTasksAction());\r\n    }, [dispatch]);\r\n\r\n   \r\n\r\n    return (\r\n        <Container sx={{ \r\n            backgroundColor: '#f0f2f5' ,\r\n           // Adjust for more roundness\r\n            width: '90%', // Adjust the width as per your requirement\r\n            maxWidth: '700px', // Maximum width, adjust as needed\r\n      // Centers the card if width is less than 100%\r\n\r\n          }}> {/* Adjust the color as needed */}\r\n        <Grid container justifyContent=\"space-between\" alignItems=\"center\" sx={{ marginBottom: 2 ,  width: '90%',   margin: 'auto', \r\n            maxWidth: '700px',}}>\r\n            <Typography variant=\"h4\"  >Task List</Typography>\r\n            <Button variant=\"contained\" color=\"primary\" onClick={() => setShowAddForm(!showAddForm)}>\r\n                + ADD Task\r\n            </Button>\r\n        </Grid>\r\n\r\n        {showAddForm && <AddTaskForm setPriority={setPriority} />}\r\n     \r\n\r\n        {tasks.map((task) => (\r\n           <Card \r\n           key={task.id} \r\n           variant=\"outlined\" \r\n           sx={{ \r\n             backgroundColor: 'white', \r\n             borderRadius: '16px', // Adjust for more roundness\r\n             width: '90%', // Adjust the width as per your requirement\r\n             maxWidth: '700px', // Maximum width, adjust as needed\r\n             margin: 'auto', // Centers the card if width is less than 100%\r\n             marginBottom: 2 \r\n           }}\r\n         >\r\n                <CardContent>\r\n                    <TaskItem task={task} />\r\n                 \r\n                </CardContent>\r\n            </Card>\r\n        ))}\r\n\r\n          \r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default TaskList;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}