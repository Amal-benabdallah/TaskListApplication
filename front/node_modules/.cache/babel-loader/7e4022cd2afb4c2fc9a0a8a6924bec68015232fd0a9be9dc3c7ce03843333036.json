{"ast":null,"code":"var _jsxFileName = \"D:\\\\Bureau\\\\TaskListApp\\\\client\\\\src\\\\components\\\\TaskItem.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { fetchTasks, addTask, updateTask, deleteTask } from '../services/taskService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TaskItem = ({\n  task\n}) => {\n  _s();\n  const dispatch = useDispatch();\n  // Function to return color based on priority\n  const getPriorityColor = priority => {\n    switch (priority) {\n      case 'High':\n        return 'red';\n      case 'Medium':\n        return 'orange';\n      case 'Low':\n        return 'green';\n      default:\n        return 'black';\n    }\n  };\n  const handleStatusChange = async newStatus => {\n    try {\n      const updatedTask = {\n        ...task,\n        status: newStatus\n      };\n      const result = await editTask(task.id, updatedTask); // API call\n      dispatch(updateTask(result)); // Redux action\n    } catch (error) {\n      console.error('Error updating task status:', error);\n      // Optionally, handle the error in UI\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'space-between'\n    },\n    children: [\"            \", /*#__PURE__*/_jsxDEV(\"span\", {\n      children: task.name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 101\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      style: {\n        color: getPriorityColor(task.priority)\n      },\n      children: task.priority\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => handleStatusChange('To Do'),\n      style: {\n        backgroundColor: task.status === 'To Do' ? 'lightgray' : 'transparent'\n      },\n      children: \"To Do\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => handleStatusChange('In Progress'),\n      style: {\n        backgroundColor: task.status === 'In Progress' ? 'lightgray' : 'transparent'\n      },\n      children: \"In Progress\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 1\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => handleStatusChange('Completed'),\n      style: {\n        backgroundColor: task.status === 'Completed' ? 'lightgray' : 'transparent'\n      },\n      children: \"Completed\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 1\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 1\n  }, this);\n};\n_s(TaskItem, \"rgTLoBID190wEKCp9+G8W6F7A5M=\", false, function () {\n  return [useDispatch];\n});\n_c = TaskItem;\nexport default TaskItem;\nvar _c;\n$RefreshReg$(_c, \"TaskItem\");","map":{"version":3,"names":["React","useState","useEffect","useSelector","useDispatch","fetchTasks","addTask","updateTask","deleteTask","jsxDEV","_jsxDEV","TaskItem","task","_s","dispatch","getPriorityColor","priority","handleStatusChange","newStatus","updatedTask","status","result","editTask","id","error","console","style","display","alignItems","justifyContent","children","name","fileName","_jsxFileName","lineNumber","columnNumber","color","onClick","backgroundColor","_c","$RefreshReg$"],"sources":["D:/Bureau/TaskListApp/client/src/components/TaskItem.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { fetchTasks, addTask, updateTask, deleteTask } from '../services/taskService';\r\nconst TaskItem = ({ task }) => {\r\n    const dispatch = useDispatch();\r\n    // Function to return color based on priority\r\n    const getPriorityColor = (priority) => {\r\n        switch(priority) {\r\n            case 'High':\r\n                return 'red';\r\n            case 'Medium':\r\n                return 'orange';\r\n            case 'Low':\r\n                return 'green';\r\n            default:\r\n                return 'black';\r\n        }\r\n    };\r\n\r\n    const handleStatusChange = async (newStatus) => {\r\n        try {\r\n            const updatedTask = { ...task, status: newStatus };\r\n            const result = await editTask(task.id, updatedTask); // API call\r\n            dispatch(updateTask(result)); // Redux action\r\n        } catch (error) {\r\n            console.error('Error updating task status:', error);\r\n            // Optionally, handle the error in UI\r\n        }\r\n    };\r\n\r\n    return (\r\n<div style={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>            <span>{task.name}</span>\r\n            <span style={{ color: getPriorityColor(task.priority) }}>{task.priority}</span>\r\n\r\n            {/* Buttons to change status */}\r\n            <button onClick={() => handleStatusChange('To Do')} \r\n        style={{ backgroundColor: task.status === 'To Do' ? 'lightgray' : 'transparent' }}>\r\n    To Do\r\n</button>\r\n<button onClick={() => handleStatusChange('In Progress')} \r\n        style={{ backgroundColor: task.status === 'In Progress' ? 'lightgray' : 'transparent' }}>\r\n    In Progress\r\n</button>\r\n<button onClick={() => handleStatusChange('Completed')} \r\n        style={{ backgroundColor: task.status === 'Completed' ? 'lightgray' : 'transparent' }}>\r\n    Completed\r\n</button>\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default TaskItem;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}