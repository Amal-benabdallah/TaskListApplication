{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\n\n// Async thunk for fetching tasks\nexport const fetchTasksAction = createAsyncThunk('tasks/fetchTasks', async () => {\n  // Here, call your API to fetch tasks\n  // Replace 'YOUR_API_ENDPOINT' with your actual endpoint\n  const response = await fetch('YOUR_API_ENDPOINT');\n  if (!response.ok) {\n    throw new Error('Failed to fetch tasks');\n  }\n  const tasks = await response.json();\n  return tasks;\n});\nconst initialState = {\n  tasks: [],\n  loading: false,\n  error: null\n};\nexport const tasksSlice = createSlice({\n  name: 'tasks',\n  initialState,\n  reducers: {\n    // Reducer to add a task\n    addTaskAction: (state, action) => {\n      state.tasks.push(action.payload);\n    },\n    // Reducer to delete a task\n    deleteTaskAction: (state, action) => {\n      state.tasks = state.tasks.filter(task => task.id !== action.payload);\n    },\n    // Reducer to update a task\n    updateTaskAction: (state, action) => {\n      const index = state.tasks.findIndex(task => task.id === action.payload.id);\n      if (index !== -1) {\n        state.tasks[index] = action.payload;\n      }\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(fetchTasksAction.pending, state => {\n      state.loading = true;\n    }).addCase(fetchTasksAction.fulfilled, (state, action) => {\n      state.loading = false;\n      state.tasks = action.payload;\n    }).addCase(fetchTasksAction.rejected, (state, action) => {\n      state.loading = false;\n      state.error = action.error.message;\n    });\n  }\n});\n\n// Export the actions and reducer\nexport const {\n  addTaskAction,\n  deleteTaskAction,\n  updateTaskAction\n} = tasksSlice.actions;\nexport default tasksSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","fetchTasksAction","response","fetch","ok","Error","tasks","json","initialState","loading","error","tasksSlice","name","reducers","addTaskAction","state","action","push","payload","deleteTaskAction","filter","task","id","updateTaskAction","index","findIndex","extraReducers","builder","addCase","pending","fulfilled","rejected","message","actions","reducer"],"sources":["D:/Bureau/TaskListApp/client/src/features/tasks/tasksSlice.js"],"sourcesContent":["import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\r\n\r\n// Async thunk for fetching tasks\r\nexport const fetchTasksAction = createAsyncThunk(\r\n  'tasks/fetchTasks',\r\n  async () => {\r\n    // Here, call your API to fetch tasks\r\n    // Replace 'YOUR_API_ENDPOINT' with your actual endpoint\r\n    const response = await fetch('YOUR_API_ENDPOINT');\r\n    if (!response.ok) {\r\n      throw new Error('Failed to fetch tasks');\r\n    }\r\n    const tasks = await response.json();\r\n    return tasks;\r\n  }\r\n);\r\n\r\nconst initialState = {\r\n  tasks: [],\r\n  loading: false,\r\n  error: null,\r\n};\r\n\r\nexport const tasksSlice = createSlice({\r\n  name: 'tasks',\r\n  initialState,\r\n  reducers: {\r\n    // Reducer to add a task\r\n    addTaskAction: (state, action) => {\r\n      state.tasks.push(action.payload);\r\n    },\r\n    // Reducer to delete a task\r\n    deleteTaskAction: (state, action) => {\r\n      state.tasks = state.tasks.filter(task => task.id !== action.payload);\r\n    },\r\n    // Reducer to update a task\r\n    updateTaskAction: (state, action) => {\r\n      const index = state.tasks.findIndex(task => task.id === action.payload.id);\r\n      if (index !== -1) {\r\n        state.tasks[index] = action.payload;\r\n      }\r\n    },\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder\r\n      .addCase(fetchTasksAction.pending, (state) => {\r\n        state.loading = true;\r\n      })\r\n      .addCase(fetchTasksAction.fulfilled, (state, action) => {\r\n        state.loading = false;\r\n        state.tasks = action.payload;\r\n      })\r\n      .addCase(fetchTasksAction.rejected, (state, action) => {\r\n        state.loading = false;\r\n        state.error = action.error.message;\r\n      });\r\n  },\r\n});\r\n\r\n// Export the actions and reducer\r\nexport const { addTaskAction, deleteTaskAction, updateTaskAction } = tasksSlice.actions;\r\n\r\nexport default tasksSlice.reducer;\r\n"],"mappings":"AAAA,SAASA,WAAW,EAAEC,gBAAgB,QAAQ,kBAAkB;;AAEhE;AACA,OAAO,MAAMC,gBAAgB,GAAGD,gBAAgB,CAC9C,kBAAkB,EAClB,YAAY;EACV;EACA;EACA,MAAME,QAAQ,GAAG,MAAMC,KAAK,CAAC,mBAAmB,CAAC;EACjD,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;IAChB,MAAM,IAAIC,KAAK,CAAC,uBAAuB,CAAC;EAC1C;EACA,MAAMC,KAAK,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;EACnC,OAAOD,KAAK;AACd,CACF,CAAC;AAED,MAAME,YAAY,GAAG;EACnBF,KAAK,EAAE,EAAE;EACTG,OAAO,EAAE,KAAK;EACdC,KAAK,EAAE;AACT,CAAC;AAED,OAAO,MAAMC,UAAU,GAAGZ,WAAW,CAAC;EACpCa,IAAI,EAAE,OAAO;EACbJ,YAAY;EACZK,QAAQ,EAAE;IACR;IACAC,aAAa,EAAEA,CAACC,KAAK,EAAEC,MAAM,KAAK;MAChCD,KAAK,CAACT,KAAK,CAACW,IAAI,CAACD,MAAM,CAACE,OAAO,CAAC;IAClC,CAAC;IACD;IACAC,gBAAgB,EAAEA,CAACJ,KAAK,EAAEC,MAAM,KAAK;MACnCD,KAAK,CAACT,KAAK,GAAGS,KAAK,CAACT,KAAK,CAACc,MAAM,CAACC,IAAI,IAAIA,IAAI,CAACC,EAAE,KAAKN,MAAM,CAACE,OAAO,CAAC;IACtE,CAAC;IACD;IACAK,gBAAgB,EAAEA,CAACR,KAAK,EAAEC,MAAM,KAAK;MACnC,MAAMQ,KAAK,GAAGT,KAAK,CAACT,KAAK,CAACmB,SAAS,CAACJ,IAAI,IAAIA,IAAI,CAACC,EAAE,KAAKN,MAAM,CAACE,OAAO,CAACI,EAAE,CAAC;MAC1E,IAAIE,KAAK,KAAK,CAAC,CAAC,EAAE;QAChBT,KAAK,CAACT,KAAK,CAACkB,KAAK,CAAC,GAAGR,MAAM,CAACE,OAAO;MACrC;IACF;EACF,CAAC;EACDQ,aAAa,EAAGC,OAAO,IAAK;IAC1BA,OAAO,CACJC,OAAO,CAAC3B,gBAAgB,CAAC4B,OAAO,EAAGd,KAAK,IAAK;MAC5CA,KAAK,CAACN,OAAO,GAAG,IAAI;IACtB,CAAC,CAAC,CACDmB,OAAO,CAAC3B,gBAAgB,CAAC6B,SAAS,EAAE,CAACf,KAAK,EAAEC,MAAM,KAAK;MACtDD,KAAK,CAACN,OAAO,GAAG,KAAK;MACrBM,KAAK,CAACT,KAAK,GAAGU,MAAM,CAACE,OAAO;IAC9B,CAAC,CAAC,CACDU,OAAO,CAAC3B,gBAAgB,CAAC8B,QAAQ,EAAE,CAAChB,KAAK,EAAEC,MAAM,KAAK;MACrDD,KAAK,CAACN,OAAO,GAAG,KAAK;MACrBM,KAAK,CAACL,KAAK,GAAGM,MAAM,CAACN,KAAK,CAACsB,OAAO;IACpC,CAAC,CAAC;EACN;AACF,CAAC,CAAC;;AAEF;AACA,OAAO,MAAM;EAAElB,aAAa;EAAEK,gBAAgB;EAAEI;AAAiB,CAAC,GAAGZ,UAAU,CAACsB,OAAO;AAEvF,eAAetB,UAAU,CAACuB,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}