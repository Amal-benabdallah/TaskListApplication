{"ast":null,"code":"var _jsxFileName = \"D:\\\\Bureau\\\\TaskListApp\\\\client\\\\src\\\\components\\\\TaskList.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { setTasksAction, addTaskAction, updateTaskAction, deleteTaskAction } from '../features/tasks/tasksSlice';\nimport { fetchTasks, addTask, updateTask, deleteTask } from '../services/taskService';\nimport TaskItem from './TaskItem';\nimport AddTaskForm from './AddTaskForm';\nimport ProgressBar from './ProgressBar';\nimport ConfirmationDialog from './ConfirmationDialog';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TaskList = () => {\n  _s();\n  const [showAddForm, setShowAddForm] = useState(false);\n  const [showConfirmation, setShowConfirmation] = useState(false);\n  const [selectedTask, setSelectedTask] = useState(null);\n  const [taskPriority, setTaskPriority] = useState('Low');\n  const [editingTask, setEditingTask] = useState(null);\n  const tasks = useSelector(state => state.tasks);\n  const dispatch = useDispatch();\n  useEffect(() => {\n    const initializeTasks = async () => {\n      const fetchedTasks = await fetchTasks(); // API call\n      dispatch(setTasks(fetchedTasks)); // Redux action\n    };\n    initializeTasks();\n  }, [dispatch]);\n  const handleAddTask = async taskName => {\n    if (editingTask) {\n      const updatedTask = {\n        ...editingTask,\n        name: taskName,\n        priority: taskPriority\n      };\n      const result = await editTask(updatedTask.id, updatedTask); // API call\n      dispatch(updateTask(result)); // Redux action\n    } else {\n      const newTask = {\n        name: taskName,\n        priority: taskPriority,\n        status: 'To Do'\n      };\n      const addedTask = await createTask(newTask); // API call\n      dispatch(addTask(addedTask)); // Redux action\n    }\n    setShowAddForm(false);\n  };\n  const handleEdit = task => {\n    setEditingTask(task);\n    setShowAddForm(true);\n  };\n  const handleDelete = task => {\n    setSelectedTask(task);\n    setShowConfirmation(true);\n  };\n  const confirmDelete = () => {\n    deleteTask(selectedTask.id);\n    setShowConfirmation(false);\n    setSelectedTask(null);\n  };\n  const handleStatusChange = (taskId, newStatus) => {\n    const task = tasks.find(t => t.id === taskId);\n    if (task) {\n      updateTask({\n        ...task,\n        status: newStatus\n      });\n    }\n  };\n  const completedTasks = tasks.filter(task => task.status === 'Completed').length;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(ProgressBar, {\n      completedCount: completedTasks,\n      totalCount: tasks.length\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleAddTaskClick,\n      children: \"Add Task\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 13\n    }, this), showAddForm && /*#__PURE__*/_jsxDEV(AddTaskForm, {\n      onAdd: handleAddTask,\n      setPriority: setTaskPriority,\n      task: editingTask\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 29\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: tasks.map(task => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [/*#__PURE__*/_jsxDEV(TaskItem, {\n          task: task,\n          onStatusChange: handleStatusChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleEdit(task),\n          children: \"Edit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleDelete(task),\n          children: \"Delete\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: [\"Priority: \", task.priority]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 25\n        }, this)]\n      }, task.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 13\n    }, this), showConfirmation && /*#__PURE__*/_jsxDEV(ConfirmationDialog, {\n      isOpen: showConfirmation,\n      onClose: () => setShowConfirmation(false),\n      onConfirm: confirmDelete,\n      message: \"Are you sure you want to delete this task?\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 9\n  }, this);\n};\n_s(TaskList, \"NWivmMA8Dkzia7FvY/spn+RfDF4=\", false, function () {\n  return [useSelector, useDispatch];\n});\n_c = TaskList;\nexport default TaskList;\nvar _c;\n$RefreshReg$(_c, \"TaskList\");","map":{"version":3,"names":["React","useState","useEffect","useSelector","useDispatch","setTasksAction","addTaskAction","updateTaskAction","deleteTaskAction","fetchTasks","addTask","updateTask","deleteTask","TaskItem","AddTaskForm","ProgressBar","ConfirmationDialog","jsxDEV","_jsxDEV","TaskList","_s","showAddForm","setShowAddForm","showConfirmation","setShowConfirmation","selectedTask","setSelectedTask","taskPriority","setTaskPriority","editingTask","setEditingTask","tasks","state","dispatch","initializeTasks","fetchedTasks","setTasks","handleAddTask","taskName","updatedTask","name","priority","result","editTask","id","newTask","status","addedTask","createTask","handleEdit","task","handleDelete","confirmDelete","handleStatusChange","taskId","newStatus","find","t","completedTasks","filter","length","children","completedCount","totalCount","fileName","_jsxFileName","lineNumber","columnNumber","onClick","handleAddTaskClick","onAdd","setPriority","map","onStatusChange","isOpen","onClose","onConfirm","message","_c","$RefreshReg$"],"sources":["D:/Bureau/TaskListApp/client/src/components/TaskList.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { setTasksAction , addTaskAction , updateTaskAction , deleteTaskAction  } from '../features/tasks/tasksSlice';\r\nimport { fetchTasks, addTask, updateTask, deleteTask } from '../services/taskService';\r\nimport TaskItem from './TaskItem';\r\nimport AddTaskForm from './AddTaskForm';\r\nimport ProgressBar from './ProgressBar';\r\nimport ConfirmationDialog from './ConfirmationDialog';\r\n\r\nconst TaskList = () => {\r\n    const [showAddForm, setShowAddForm] = useState(false);\r\n    const [showConfirmation, setShowConfirmation] = useState(false);\r\n    const [selectedTask, setSelectedTask] = useState(null);\r\n    const [taskPriority, setTaskPriority] = useState('Low');\r\n    const [editingTask, setEditingTask] = useState(null);\r\n    const tasks = useSelector((state) => state.tasks);\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        const initializeTasks = async () => {\r\n            const fetchedTasks = await fetchTasks(); // API call\r\n            dispatch(setTasks(fetchedTasks)); // Redux action\r\n        };\r\n        initializeTasks();\r\n    }, [dispatch]);\r\n\r\n    const handleAddTask = async (taskName) => {\r\n        if (editingTask) {\r\n            const updatedTask = { ...editingTask, name: taskName, priority: taskPriority };\r\n            const result = await editTask(updatedTask.id, updatedTask); // API call\r\n            dispatch(updateTask(result)); // Redux action\r\n        } else {\r\n            const newTask = { name: taskName, priority: taskPriority, status: 'To Do' };\r\n            const addedTask = await createTask(newTask); // API call\r\n            dispatch(addTask(addedTask)); // Redux action\r\n        }\r\n        setShowAddForm(false);\r\n    };\r\n\r\n\r\n    const handleEdit = (task) => {\r\n        setEditingTask(task);\r\n        setShowAddForm(true);\r\n    };\r\n\r\n    const handleDelete = (task) => {\r\n        setSelectedTask(task);\r\n        setShowConfirmation(true);\r\n    };\r\n\r\n    const confirmDelete = () => {\r\n        deleteTask(selectedTask.id);\r\n        setShowConfirmation(false);\r\n        setSelectedTask(null);\r\n    };\r\n\r\n    const handleStatusChange = (taskId, newStatus) => {\r\n        const task = tasks.find(t => t.id === taskId);\r\n        if (task) {\r\n            updateTask({ ...task, status: newStatus });\r\n        }\r\n    };\r\n\r\n    const completedTasks = tasks.filter(task => task.status === 'Completed').length;\r\n\r\n    return (\r\n        <div>\r\n            <ProgressBar completedCount={completedTasks} totalCount={tasks.length} />\r\n            <button onClick={handleAddTaskClick}>Add Task</button>\r\n\r\n            {showAddForm && <AddTaskForm onAdd={handleAddTask} setPriority={setTaskPriority} task={editingTask} />}\r\n\r\n            <ul>\r\n                {tasks.map(task => (\r\n                    <li key={task.id}>\r\n                        <TaskItem task={task} onStatusChange={handleStatusChange} />\r\n                        <button onClick={() => handleEdit(task)}>Edit</button>\r\n                        <button onClick={() => handleDelete(task)}>Delete</button>\r\n                        <span>Priority: {task.priority}</span>\r\n                    </li>\r\n                ))}\r\n            </ul>\r\n\r\n            {showConfirmation && (\r\n                <ConfirmationDialog\r\n                    isOpen={showConfirmation}\r\n                    onClose={() => setShowConfirmation(false)}\r\n                    onConfirm={confirmDelete}\r\n                    message=\"Are you sure you want to delete this task?\"\r\n                />\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default TaskList;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}