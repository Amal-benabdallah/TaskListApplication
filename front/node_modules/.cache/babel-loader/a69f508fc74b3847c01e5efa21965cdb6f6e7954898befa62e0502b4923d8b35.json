{"ast":null,"code":"var _jsxFileName = \"D:\\\\Bureau\\\\TaskListApp\\\\client\\\\src\\\\components\\\\TaskItem.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { updateTaskAction } from '../features/tasks/tasksSlice';\nimport { updateTask } from '../services/taskService';\nimport ProgressBar from './ProgressBar';\nimport { Button } from '@mui/material';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TaskItem = ({\n  task\n}) => {\n  _s();\n  const dispatch = useDispatch();\n  const [progressBarStatus, setProgressBarStatus] = useState(task.status || 'ToDo');\n  const getPriorityColor = priority => {\n    switch (priority) {\n      case 'High':\n        return 'red';\n      case 'Medium':\n        return 'orange';\n      case 'Low':\n        return 'green';\n      default:\n        return 'black';\n    }\n  };\n  const handleStatusChange = async newStatus => {\n    const updatedTask = {\n      ...task,\n      status: newStatus\n    };\n    try {\n      const result = await updateTask(task.id, updatedTask);\n      dispatch(updateTaskAction(result));\n      setProgressBarStatus(newStatus); // Update progress bar status after successful update\n    } catch (error) {\n      console.error('Error updating task status:', error);\n    }\n  };\n  const handleNextStatus = () => {\n    const statuses = ['ToDo', 'InProgress', 'Completed'];\n    const currentStatusIndex = statuses.indexOf(progressBarStatus);\n    const nextStatusIndex = (currentStatusIndex + 1) % statuses.length;\n    const newStatus = statuses[nextStatusIndex];\n    handleStatusChange(newStatus);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'space-between',\n      marginBottom: '10px'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"span\", {\n      children: task.name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      style: {\n        color: getPriorityColor(task.priority)\n      },\n      children: task.priority\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(ProgressBar, {\n      status: progressBarStatus\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      variant: \"contained\",\n      color: \"primary\",\n      onClick: handleNextStatus,\n      children: \"Next Status\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      children: progressBarStatus\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }, this), \" \"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 9\n  }, this);\n};\n_s(TaskItem, \"B9mJlnSchBAJs8pJ0mcsTPGDf5Q=\", false, function () {\n  return [useDispatch];\n});\n_c = TaskItem;\nexport default TaskItem;\nvar _c;\n$RefreshReg$(_c, \"TaskItem\");","map":{"version":3,"names":["React","useState","useDispatch","updateTaskAction","updateTask","ProgressBar","Button","jsxDEV","_jsxDEV","TaskItem","task","_s","dispatch","progressBarStatus","setProgressBarStatus","status","getPriorityColor","priority","handleStatusChange","newStatus","updatedTask","result","id","error","console","handleNextStatus","statuses","currentStatusIndex","indexOf","nextStatusIndex","length","style","display","alignItems","justifyContent","marginBottom","children","name","fileName","_jsxFileName","lineNumber","columnNumber","color","variant","onClick","_c","$RefreshReg$"],"sources":["D:/Bureau/TaskListApp/client/src/components/TaskItem.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { updateTaskAction } from '../features/tasks/tasksSlice';\r\nimport { updateTask } from '../services/taskService';\r\nimport ProgressBar from './ProgressBar';\r\nimport { Button } from '@mui/material';\r\n\r\nconst TaskItem = ({ task }) => {\r\n    const dispatch = useDispatch();\r\n    const [progressBarStatus, setProgressBarStatus] = useState(task.status || 'ToDo');\r\n\r\n    const getPriorityColor = (priority) => {\r\n        switch (priority) {\r\n            case 'High': return 'red';\r\n            case 'Medium': return 'orange';\r\n            case 'Low': return 'green';\r\n            default: return 'black';\r\n        }\r\n    };\r\n\r\n    const handleStatusChange = async (newStatus) => {\r\n        const updatedTask = { ...task, status: newStatus };\r\n        try {\r\n            const result = await updateTask(task.id, updatedTask);\r\n            dispatch(updateTaskAction(result));\r\n            setProgressBarStatus(newStatus); // Update progress bar status after successful update\r\n        } catch (error) {\r\n            console.error('Error updating task status:', error);\r\n        }\r\n    };\r\n\r\n    const handleNextStatus = () => {\r\n        const statuses = ['ToDo', 'InProgress', 'Completed'];\r\n        const currentStatusIndex = statuses.indexOf(progressBarStatus);\r\n        const nextStatusIndex = (currentStatusIndex + 1) % statuses.length;\r\n        const newStatus = statuses[nextStatusIndex];\r\n        handleStatusChange(newStatus);\r\n    };\r\n\r\n    return (\r\n        <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between', marginBottom: '10px' }}>\r\n            <span>{task.name}</span>\r\n            <span style={{ color: getPriorityColor(task.priority) }}>{task.priority}</span>\r\n            <ProgressBar status={progressBarStatus} />\r\n            <Button variant=\"contained\" color=\"primary\" onClick={handleNextStatus}>\r\n                Next Status\r\n            </Button>\r\n            <span>{progressBarStatus}</span> {/* Displaying the current status */}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default TaskItem;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}